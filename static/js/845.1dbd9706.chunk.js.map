{"version":3,"file":"static/js/845.1dbd9706.chunk.js","mappings":"+NAGaA,EAAoBC,EAAAA,QAAAA,IAAH,+LAGR,qBAAGC,MAAkBC,OAAOC,UAA5B,GAEXC,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,SAKEC,EAA8BL,EAAAA,QAAAA,IAAH,wC,qECiBxC,EA3BqB,WAEnB,IAAMM,GAAc,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IAEhDC,GADWC,EAAAA,EAAAA,MACaC,SAASC,MAAM,KAAK,GAC5CC,GAAeC,EAAAA,EAAAA,MAAYT,YACjC,GAAwBU,EAAAA,EAAAA,UAAQ,OAACF,QAAD,IAACA,EAAAA,EAAgBR,GAAjD,eAAOW,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAA0B,KAAjBN,QAAwCS,IAAjBT,EAA8B,QAAYA,GAAlG,eAAOU,EAAP,KAAaC,EAAb,KACMC,GAAUC,EAAAA,EAAAA,MAIhB,OAHAC,EAAAA,EAAAA,YAAU,WACRF,GAAQG,EAAAA,EAAAA,IAAeR,GACxB,GAAE,CAACA,EAAMK,KAER,UAACvB,EAAD,YAEE,SAAC,EAAA2B,gBAAD,CAAiBT,KAAMA,EAAMU,WAAYT,EAASE,KAAMA,EAAMQ,WAAYP,KAE1E,SAAC,KAAD,CAAUQ,GAAE,oBAAeT,EAAf,YAAuBH,MAEnC,SAACZ,EAAD,WACE,SAAC,KAAD,CAAQyB,QAAS,CAACb,EAAMC,EAASG,SAKxC,C","sources":["pages/CalendarPage.styled.js","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { device } from 'styles/mediaVeriables';\n\nexport const CalendarContainer = styled.div`\n  width: 100%;\n  padding-inline: 20px;\n  background-color: ${({ theme }) => theme.colors.background};\n\n  @media ${device.tablet} {\n    padding-inline: 32px;\n  }\n\n  @media ${device.desktop} {\n    padding-inline: 16px;\n  }\n`;\n\nexport const ChoosedDayOrMonthsContainer = styled.div`\n  width: 100%;\n`;\n","import { Navigate, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { CalendarContainer, ChoosedDayOrMonthsContainer } from './CalendarPage.styled';\nimport { CalendarToolbar } from 'components/User';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setChoosedDate } from 'redux/tasks/operations';\n\nconst CalendarPage = () => {\n\n  const currentDate = new Date().toISOString().slice(0, 10);\n  const location = useLocation();\n  const typeFromPath = location.pathname.split('/')[2];\n  const dateFromPath = useParams().currentDate;\n  const [date, setDate] = useState(dateFromPath ?? currentDate);\n  const [type, setType] = useState(typeFromPath === '' || typeFromPath === undefined ? ('month') : (typeFromPath));\n  const dispath = useDispatch();\n  useEffect(()=>{\n    dispath(setChoosedDate(date))\n  }, [date, dispath]);\n  return (\n    <CalendarContainer>\n\n      <CalendarToolbar date={date} changeDate={setDate} type={type} changeType={setType}/>\n\n      <Navigate to={`/calendar/${type}/${date}`}/>\n\n      <ChoosedDayOrMonthsContainer>\n        <Outlet context={[date, setDate, setType]}/>\n      </ChoosedDayOrMonthsContainer>\n      \n    </CalendarContainer>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["CalendarContainer","styled","theme","colors","background","device","ChoosedDayOrMonthsContainer","currentDate","Date","toISOString","slice","typeFromPath","useLocation","pathname","split","dateFromPath","useParams","useState","date","setDate","undefined","type","setType","dispath","useDispatch","useEffect","setChoosedDate","CalendarToolbar","changeDate","changeType","to","context"],"sourceRoot":""}