{"version":3,"file":"static/js/262.0ef977c3.chunk.js","mappings":"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","sources":["components/Auth/LoginForm/LoginForm.styled.js","components/Auth/AuthField/AuthField.styled.js","components/Auth/AuthField/AuthField.jsx","helpers/patterns.js","helpers/authFieldValidation.js","components/Auth/LoginForm/LoginForm.jsx","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/RegisterForm.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n// add import of 3 breakpoints\n// add import of colors\n// check main font size and line height and delete doubling\n// check using font family\n\nexport const StyledForm = styled.form`\n    box-sizing: border-box;\n    width: 100%;\n    min-height: 346px;\n    margin: auto 20px;\n    padding: 40px 20px;\n    display: flex;\n    flex-direction: column;\n    background-color: #FFFFFF;\n    border-radius: 8px;\n\n    @media screen and (min-width: 375px){\n        width: 335px;\n    }\n\n    @media screen and (min-width: 768px){\n        width: 480px;\n        min-height: 424px;\n        padding: 40px;\n    }\n`;\n\nexport const StyledHeading = styled.h2`\n    margin-bottom: 8px;\n    color: #3E85F3;\n    font-family: 'Inter';\n    font-size: 18px;\n    line-height: 24px;\n    font-weight: 600;\n    text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07), 0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n    @media screen and (min-width: 768px) {\n        margin-bottom: 22px;\n        font-size: 24px;  \n    }\n`;\n\nexport const StyledIcon = styled.div`\n    margin-left: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n`;\n\nexport const StyledButton = styled.button`\n    height: 46px;\n    margin-top: 32px;\n    background-color: #3E85F3;\n    color: #FFFFFF;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 18px;\n    letter-spacing: -0.02em;\n    box-shadow: 4px 2px 16px rgba(136, 165, 191, 0.48);\n    border-radius: 16px;\n    border-width: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer; \n    \n    :hover {\n        background-color: #2c66bc;\n    }\n\n    @media screen and (min-width: 768px) {\n        height: 56px;\n        margin-top: 48px;\n        font-size: 18px;\n        line-height: 24px;\n    }\n`;","import styled from \"@emotion/styled\";\n\n// add import of 3 breakpoints\n// add import of colors\n// check main font size and line height and delete doubling\n// check using font family\n\nexport const InputContainer = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const StyledLabel = styled.label`\n    margin-top: 24px;\n    color: ${(props) => {\n        switch (props.valid) {\n            case true:\n                return '#3CBC81';\n            case false:\n                return '#E74A3B';\n            default:\n                return '#111111'\n        }           \n    }};\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 15px;\n    @media screen and (min-width: 768px) {\n        margin-top: 18px;\n        font-size: 14px;\n        line-height: 17px; \n    }\n`;\n\nexport const StyledInput = styled.input`\n    box-sizing: border-box;\n    height: 46px;\n    padding: 14px;\n    margin-top: 8px;\n    background-color: #FFFFFF;\n    color: #111111;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 18px;\n    border: 1px solid;\n    border-color: ${(props) => {\n        switch (props.valid) {\n            case true:\n                return '#3CBC81';\n            case false:\n                return '#E74A3B';\n            default:\n                return 'rgba(220, 227, 229, 0.6)'\n        }           \n    }};\n    border-radius: 8px;\n\n    ::placeholder {\n        color: #DCE3E5;    \n    }\n    :focus {\n        border: 1px solid #111111;\n    }\n\n    @media screen and (min-width: 768px) {\n        height: 54px;\n        padding: 18px;\n        font-size: 16px;\n        line-height: 18px;\n    }\n`;\n\nexport const StyledIcon = styled.div`\n    width: 20px;\n    height: 20px;\n    margin-right: 12px;\n    position: absolute;\n    bottom: 13px;\n    right: 0;\n\n`;\n\nexport const StyledInputNotification = styled.p`\n    position: absolute;\n    bottom: -22px;\n    margin: 0 18px;\n    position: absolute;\n    font-size: 12px;\n    line-height: 14px;\n    color: ${(props) => {\n        switch (props.valid) {\n            case true:\n                return '#3CBC81';\n            case false:\n                return '#E74A3B';\n            default:\n                return 'transparant';\n        }           \n    }};\n`;","import { StyledInput, StyledLabel, StyledIcon, InputContainer, StyledInputNotification } from './AuthField.styled';\nimport { BiErrorCircle, BiCheckCircle } from \"react-icons/bi\";\nimport PropTypes from 'prop-types';\n\nexport const AuthField = ({valid, onChange, value, name, type, placeholder}) => {\n    return (\n        <InputContainer>\n            <StyledLabel htmlFor={name.toLowerCase()} valid={valid}>{name}</StyledLabel>\n            <StyledInput\n                id={name.toLowerCase()}\n                name={name.toLowerCase()}\n                type={type}\n                onChange={onChange}\n                value={value}\n                placeholder={placeholder}\n                valid={valid}\n            />\n            {valid === false && <StyledIcon><BiErrorCircle color='#E74A3B' size={20}/></StyledIcon>}\n            {valid && <StyledIcon><BiCheckCircle color='#3CBC81' size={20}/></StyledIcon>}\n            {valid !== null && <StyledInputNotification valid={valid}>This is  {valid ? ('a CORRECT') : ('an ERROR')} {name.toLowerCase()}</StyledInputNotification>}\n        </InputContainer>\n    )\n};\n\nAuthField.propTypes = {\n    valid: PropTypes.oneOf([true, false, null]),\n    onChange: PropTypes.func.isRequired, \n    value: PropTypes.string.isRequired, \n    name: PropTypes.string.isRequired, \n    type: PropTypes.oneOf(['text', 'email']).isRequired, \n    placeholder: PropTypes.string.isRequired\n};\n","const namePattern = /^[\\p{L}\\s]+$/u; // only Latin or Cyrillic characters\nconst emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst passwordPattern = /^.*(?=.{6,})((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/; // 6 characters, at lest one upperCase and one lowercase\nconst urlPattern =\n  /^https?:\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?$/;\nconst phonePattern = /^38 \\(\\d{3}\\) \\d{3} \\d{2} \\d{2}$/;\n\nexport const patterns = {\n  namePattern,\n  emailPattern,\n  passwordPattern,\n  urlPattern,\n  phonePattern,\n};\n","import * as yup from 'yup';\n\nimport { patterns } from 'helpers/patterns';\n\n// const nameRegex = /^[\\p{L}\\s]+$/u;\n// const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n// const passwordRegex = /^.*(?=.{6,})((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/;\n\nconst nameSchema = yup\n  .string()\n  .min(1, 'min 1')\n  .max(15)\n  .required()\n  .matches(patterns.namePattern);\n\nconst emailSchema = yup\n  .string()\n  .email()\n  .matches(patterns.emailPattern)\n  .required();\n\nconst passwordSchema = yup\n  .string()\n  .required()\n  .min(6)\n  .max(16)\n  .matches(patterns.passwordPattern);\n\nconst validateField = async (value, schema) => {\n  let isValid;\n  let firstError;\n  await schema\n    .validate(value)\n    .then(() => (isValid = true))\n    .catch(error => {\n      isValid = false;\n      firstError = error.message;\n    });\n  return { valid: isValid, error: firstError };\n};\n\nexport const validateRegisterForm = async ({ name, email, password }) => {\n  const nameValidation = await validateField(name, nameSchema);\n  const emailValidation = await validateField(email, emailSchema);\n  const passwordValidation = await validateField(password, passwordSchema);\n  return {\n    name: nameValidation,\n    email: emailValidation,\n    password: passwordValidation,\n  };\n};\n\nexport const validateLoginForm = async ({ email, password }) => {\n  const emailValidation = await validateField(email, emailSchema);\n  const passwordValidation = await validateField(password, passwordSchema);\n  return { email: emailValidation, password: passwordValidation };\n};\n","import { useFormik } from 'formik';\nimport { StyledButton, StyledForm, StyledHeading, StyledIcon } from './LoginForm.styled';\nimport { useState } from 'react';\nimport { AuthField } from '../AuthField/AuthField';\nimport { validateLoginForm } from 'helpers';\nimport { FiLogIn } from 'react-icons/fi';\n\nexport const LoginForm = () => {\n    const [emailValid, setEmailValid] = useState(null);\n    const [passwordValid, setPasswordValid] = useState(null);\n\n    const onSubmitForm = async (values) => {\n        // validation of inputs\n        const validationResponse = await validateLoginForm(values);\n        setEmailValid(validationResponse.email.valid);\n        setPasswordValid(validationResponse.password.valid);\n\n        // set loader true\n\n        // API registration\n\n        // set loader false\n\n        // notificate API response\n\n        // redirect /calendar/month\n    };\n\n    const formik = useFormik({\n        initialValues: {\n        password: '',\n        email: '',\n        },\n        onSubmit: values => {\n        onSubmitForm(values)\n        }\n    });\n\n    return (\n        <StyledForm onSubmit={formik.handleSubmit}>\n            <StyledHeading>Sign in</StyledHeading>\n\n            <AuthField \n                name={'Email'}\n                value={formik.values.email}\n                type={'email'}\n                onChange={formik.handleChange}\n                valid={emailValid}\n                placeholder='Enter email'\n            />\n\n            <AuthField \n                name={'Password'}\n                value={formik.values.password}\n                type={'text'}\n                onChange={formik.handleChange}\n                valid={passwordValid}\n                placeholder='Enter password'\n            />\n\n            <StyledButton type=\"submit\">\n                Sign in\n                <StyledIcon><FiLogIn size={17} color='#FFFFFF'/></StyledIcon>\n            </StyledButton>\n        </StyledForm>\n    )\n};\n","import styled from \"@emotion/styled\";\n\n// add import of 3 breakpoints\n// add import of colors\n// check main font size and line height and delete doubling\n// check using font family\n\nexport const StyledForm = styled.form`\n    box-sizing: border-box;\n    width: 100%;\n    min-height: 469px;\n    margin: auto 20px;\n    padding: 40px 20px;\n    display: flex;\n    flex-direction: column;\n    background-color: #FFFFFF;\n    border-radius: 8px;\n\n    @media screen and (min-width: 375px){\n        width: 335px;\n    }\n\n    @media screen and (min-width: 768px){\n        width: 480px;\n        min-height: 521px;\n        padding: 40px;\n    }\n`;\n\nexport const StyledHeading = styled.h2`\n    margin-bottom: 8px;\n    color: #3E85F3;\n    font-family: 'Inter';\n    font-size: 18px;\n    line-height: 24px;\n    font-weight: 600;\n    text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07), 0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n    @media screen and (min-width: 768px) {\n        margin-bottom: 22px;\n        font-size: 24px;  \n    }\n`;\n\nexport const StyledIcon = styled.div`\n    margin-left: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n`;\n\nexport const StyledButton = styled.button`\n    height: 46px;\n    margin-top: 32px;\n    background-color: #3E85F3;\n    color: #FFFFFF;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 18px;\n    letter-spacing: -0.02em;\n    box-shadow: 4px 2px 16px rgba(136, 165, 191, 0.48);\n    border-radius: 16px;\n    border-width: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer; \n    \n    :hover {\n        background-color: #2c66bc;\n    }\n\n    @media screen and (min-width: 768px) {\n        height: 56px;\n        margin-top: 48px;\n        font-size: 18px;\n        line-height: 24px;\n    }\n`;","import { useFormik } from 'formik';\nimport { StyledButton, StyledForm, StyledHeading, StyledIcon } from './RegisterForm.styled';\nimport { useState } from 'react';\nimport { AuthField } from '../AuthField/AuthField';\nimport { validateRegisterForm } from 'helpers/authFieldValidation';\nimport { FiLogIn } from 'react-icons/fi';\n\nexport const RegisterForm = () => {\n\n    const [emailValid, setEmailValid] = useState(null);\n    const [passwordValid, setPasswordValid] = useState(null);\n    const [nameValid, setNameValid] = useState(null);\n\n    const onSubmitForm = async (values) => {\n        // validation of inputs\n        const validationResponse = await validateRegisterForm(values);\n        setEmailValid(validationResponse.email.valid);\n        setPasswordValid(validationResponse.password.valid);\n        setNameValid(validationResponse.name.valid);\n\n        // set loader true\n\n        // API registration\n\n        // set loader false\n\n        // notificate API response\n\n        // redirect /calendar/month\n    };\n\n    const formik = useFormik({\n        initialValues: {\n        name: '',\n        password: '',\n        email: '',\n        },\n        onSubmit: values => {\n        onSubmitForm(values)\n        }\n    });\n\n    return (\n        <StyledForm onSubmit={formik.handleSubmit}>\n            <StyledHeading>Sign up</StyledHeading>\n\n\n            <AuthField \n                name={'Name'}\n                value={formik.values.name}\n                type={'text'}\n                onChange={formik.handleChange}\n                valid={nameValid}\n                placeholder='Enter your name'\n            />\n\n            <AuthField \n                name={'Email'}\n                value={formik.values.email}\n                type={'email'}\n                onChange={formik.handleChange}\n                valid={emailValid}\n                placeholder='Enter email'\n            />\n\n            <AuthField \n                name={'Password'}\n                value={formik.values.password}\n                type={'text'}\n                onChange={formik.handleChange}\n                valid={passwordValid}\n                placeholder='Enter password'\n            />\n\n            <StyledButton type=\"submit\">\n                Sign up\n                <StyledIcon><FiLogIn size={17} color='#FFFFFF'/></StyledIcon>\n            </StyledButton>\n        </StyledForm>\n    )\n}"],"names":["StyledForm","styled","StyledHeading","StyledIcon","StyledButton","InputContainer","StyledLabel","props","valid","StyledInput","StyledInputNotification","AuthField","onChange","value","name","type","placeholder","htmlFor","toLowerCase","id","color","size","patterns","nameSchema","yup","min","max","required","matches","emailSchema","email","passwordSchema","validateField","schema","validate","then","isValid","catch","error","firstError","message","validateRegisterForm","password","nameValidation","emailValidation","passwordValidation","validateLoginForm","LoginForm","useState","emailValid","setEmailValid","passwordValid","setPasswordValid","onSubmitForm","values","validationResponse","formik","useFormik","initialValues","onSubmit","handleSubmit","handleChange","RegisterForm","nameValid","setNameValid"],"sourceRoot":""}